% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bagger.R
\name{bagger}
\alias{bagger}
\alias{bagger.default}
\alias{bagger.data.frame}
\alias{bagger.matrix}
\alias{bagger.formula}
\alias{bagger.recipe}
\title{Bagging functions}
\usage{
bagger(x, ...)

\method{bagger}{default}(x, ...)

\method{bagger}{data.frame}(x, y, model = "CART", B = 10L,
  opt = NULL, var_imp = FALSE, oob = NULL, extract = NULL, ...)

\method{bagger}{matrix}(x, y, model = "CART", B = 10L, opt = NULL,
  var_imp = FALSE, oob = NULL, extract = NULL, ...)

\method{bagger}{formula}(formula, data, model = "CART", B = 10L,
  opt = NULL, var_imp = FALSE, oob = NULL, extract = NULL, ...)

\method{bagger}{recipe}(x, data, model = "CART", B = 10L, opt = NULL,
  var_imp = FALSE, oob = NULL, extract = NULL, ...)
}
\arguments{
\item{x}{A data frame, matrix, or recipe (depending on the method being used.)}

\item{...}{Optional arguments to pass to the \code{extract} function.}

\item{y}{A numeric or factor vector of outcomes. Categorical outcomes (i.e
classes) should be represented as factors, not integers.}

\item{model}{A single character value for the model being bagged. Possible
values are "CART", "MARS", "C5.0" (classification only), and "model_rules"
(regression only).}

\item{B}{A single integer greater than 1 for the maximum number of bootstrap
samples/ensemble members (some model fits might fail).}

\item{opt}{A named list (or NULL) of arguments to pass to the underlying
model function. A list of possible arguments per model are given in Details.}

\item{var_imp}{A logical: should variable importance scores be calculated?}

\item{oob}{A metric set created by \code{\link[yardstick:metric_set]{yardstick::metric_set()}} or NULL. If not
NULL, then the out-of-bag samples are used to estimate model performance.}

\item{extract}{A function (or NULL) that can extract model-related aspects
of each ensemble member. See Details below.}

\item{formula}{An object of class "formula" (or one that can be coerced to
that class): a symbolic description of the model to be fitted. Note that
this package does not support multivariate outcomes and that, if some
predictors are factors, dummy variables will not be created.}

\item{data}{A data frame containing the variables used in the formula or
recipe.}
}
\description{
General suite of bagging functions for several models.
}
\details{
\code{bagger()} fits separate models to bootstrap samples. The
prediction function for each model object is encoded in an R
expression and the original model object is discarded. When
making predictions, each prediction formula is evaluated on the
new data and aggregated using the mean.

Any arbitrary item can be saved from the model object
(including the model object itself) using the \code{extract}
argument, which should be a function with arguments \code{x}, and
\code{...}. The results of this function are saved into a list column
called \code{extras} (see the sample below).
}
\examples{
mars_reg <- bagger(Sepal.Width ~ ., data = iris, model = "MARS", var_imp = TRUE)

library(AmesHousing)
ames <- make_ames() \%>\% dplyr::select(-contains("Qu"))
# These take a while:

\dontrun{
set.seed(9724)
ames_mars  <- bagger(log10(Sale_Price) ~ ., data = ames, model = "MARS")
ames_rules <- bagger(log10(Sale_Price) ~ ., data = ames, model = "model_rules")

# Extracting elements:

num_term_nodes <- function(x, ...) {
  tibble(num_nodes = sum(x$frame$var == "<leaf>"))
}

ames_cart <- bagger(log10(Sale_Price) ~ ., data = ames, extract = num_term_nodes)
bind_rows(ames_cart$model_df$extras)
}
}
